def resta = \n m . m pred n

def equal = \n m . and (is0 (resta n m)) (is0 (resta m n))

def resto = Y (\f n m . (equal n m) zero ((is0 (resta n m)) n (f (resta n m) m)))

def divs = Y (\f n m. (is0 m) nil ((is0 (resto n m)) (cons m (f n (pred m))) (f n (pred m))))   

def divisores = \n. divs n (pred n) 

